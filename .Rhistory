data <- rlang::as_data_mask(data)
rlang::enexprs(map_fields, .named = TRUE)[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
rlang::enexprs(map_fields, .named = TRUE)[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
rlang::enexprs(map_fields, .named = TRUE)[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
rlang::enexprs(map_fields, .named = TRUE)[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE)
map_fields[[1]] |>
as.list()
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
# |>
# list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE)
map_fields[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
# |>
# list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
}
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE)
map_fields[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE)
map_fields[[1]] |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(-1) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract(-1) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract(-1) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE)
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
as.list()
# magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(-1) |>
as.list()
# magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(1) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE))
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(1) |>
as.list() |>
magrittr::extract(-1)
purrr::map(map_fields, ~rlang::as_quosures(.x, env = data, named = TRUE)) |>
magrittr::extract2(1) |>
list2env(envir = environment())
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
# debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
View(inspect)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(1) |>
as.list() |>
magrittr::extract(-1)
purrr::iwalk(map_fields, ~{
assign(.y, rlang::inject(function(){
rlang::as_quosures(!!.x, env = !!data, named = TRUE))
}, env = environment())
})
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
# debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
test_fun <- function(data, map_fields, boundary_name){
data <- rlang::as_data_mask(data)
map_fields <- rlang::enexprs(map_fields, .named = TRUE) |>
magrittr::extract2(1) |>
as.list() |>
magrittr::extract(-1) |>
purrr::map(~rlang::as_quosures(.x, env = data, named = TRUE))
boundary_name	<- rlang::as_label(rlang::enexpr(boundary_name));
mget(ls())
}
# debug(test_fun)
inspect <- test_fun(x, map_fields = c(g), boundary_name = episode)
inspect$map_fields |> purrr::map(~rlang::eval_tidy(.x))
library(book.of.features)
sample(100, 50) |> bin.windows()
library(book.of.features)
sample(100, 50) |> bin.windows()
library(book.of.features)
sample(100, 50) |> bin.windows()
debug(bin.window)
debug(bin.windows)
sample(100, 50) |> bin.windows()
sample(100, 50) |> bin.windows()
.map
library(book.of.features)
sample(100, 50) |> bin.windows()
debug(bin.windows)
sample(100, 50) |> bin.windows()
sample(100, 50) |> bin.windows()
.map
.map
x <- sample(100, 50) |> sort()
x
b <- 10
x %% b
x - (x %% b)
list(
x
, x - (x %% b)
)
list(
x
, x/b - (x %% b)
)
range(x)
rng_x <- range(x)
cut(x, 10)
cut(x, 10, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
cut(x, 10, dig.lab = 1, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
x <- sample(100, 50)
b <- 10
list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
b <- diff(range(x))/10
b <- round(diff(range(x))/10)
x <- sample(100, 50)
b <- round(diff(range(x))/10)
list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
x - (x %% b)
x <- sample(100, 50)
b <- round(diff(range(x))/10)
list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
x <- sample(100, 50) |> sort()
b <- round(diff(range(x))/10)
list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
x <- sample(500, 50) |> sort()
b <- round(diff(range(x))/10)
list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
z <- list(
x
, cut(x, breaks = b, dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
b <- factor.int(x)
b <- book.of.utilities::factor.int(x)
i <- sample(500, 50) |> sort()
use.bin = NULL
as.factor = FALSE
min.factor = 1
i <- sample(500, 50) |> sort()
b <- book.of.utilities::factor.int(i)
if (rlang::is_empty(use.bin){ b <- b[unlist(b) >= min.factor] |> min() })
if (rlang::is_empty(use.bin)){ b <- b[unlist(b) >= min.factor] |> min() })
if (rlang::is_empty(use.bin)){ b <- b[unlist(b) >= min.factor] |> min() }
if (rlang::is_empty(use.bin)){ b <- purrr::keep(unlist(b), ~.x >= min.factor) |> min() }
rm(b,x)
rm(rng_x)
if (rlang::is_empty(use.bin)){
use.bin <- purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor) |> min(na.rm = TRUE)
}
min.factor = 10
i <- sample(500, 50) |> sort()
if (rlang::is_empty(use.bin)){
use.bin <- purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor) |> min(na.rm = TRUE)
}
unlist(book.of.utilities::factor.int(i))
purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor)
purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor) |> min(na.rm = TRUE)
if (rlang::is_empty(use.bin)){
use.bin <- purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor) |> min(na.rm = TRUE)
}
use.bin <<- purrr::keep(unlist(book.of.utilities::factor.int(i)), ~.x >= min.factor) |> min(na.rm = TRUE)
z <- list(
i
, cut(i, breaks = round(diff(range(i)/use.bin)), dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
z
z <- list(i, cut(i, breaks = round(diff(range(i) / use.bin)), dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE))
z <- data.table::data.table(win.vals = i, label = cut(i, breaks = round(diff(range(i) / use.bin)), dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE))
View(z)
.map <- data.table::data.table(win.vals = i, label = cut(i, breaks = round(diff(range(i) / use.bin)), dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE))
.map$label |> data.table::setattr("bin.map", .map) |> print()
.map$label |> data.table::setattr("bin.map", .map[, .(win.vals = list(range(win.vals))), by = label]) |> print()
if (!as.factor){ levels(.out)[.out] } else { .out }
.out <- .map$label |> data.table::setattr("bin.map", .map[, .(win.vals = list(range(win.vals))), by = label]) |> print()
if (!as.factor){ levels(.out)[.out] } else { .out }
purrr::as_mapper(~{
.map <- data.table::data.table(
win.vals = .x
, label = cut(.x, breaks = round(diff(range(.x) / use.bin)), dig.lab = 0, ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
)
.out <- data.table::setattr(.map$label, "bin.map", .map[, .(win.vals = list(range(win.vals))), by = label])
if (!as.factor){ levels(.out)[.out] } else { .out }
})
library(book.of.features)
bin.windows(i, use.bin = 10, as.factor = TRUE, min.factor = 4)
bin.windows(i, use.bin = 10, as.factor = TRUE, min.factor = 4) |> str()
bin.windows(i, use.bin = 10, as.factor = TRUE, min.factor = 4)
bin.windows(i, as.factor = TRUE, min.factor = 4)
bin.windows(i, as.factor = !TRUE, min.factor = 4)
library(book.of.features)
bin.windows(i, as.factor = TRUE, min.factor = 4)
i <- sample(500, 50) |> sort()
bin.windows(i, as.factor = TRUE, min.factor = 4)
bin.windows(i, as.factor = !TRUE, min.factor = 4)
bin.windows(i, use.bin = 10, as.factor = TRUE, min.factor = 4)
book.of.utilities::factor.int(i)
book.of.utilities::factor.int(i) |> unlist()
debug(bin.windows)
bin.windows(i, as.factor = TRUE, min.factor = 4)
.out
.map$label
library(book.of.features)
library(book.of.features)
bin.windows(i, as.factor = TRUE, min.factor = 4)
library(book.of.features)
i <- sample(500, 50) |> sort()
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
debug(bin.windows)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, as.factor = TRUE)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
debug(bin.windows)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = TRUE)
rlang::is_empty(use.bin)
bin.windows(i, as.factor = TRUE)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
library(book.of.features)
i <- sample(500, 50)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
library(book.of.features)
i <- sample(500, 50)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
bin.windows(mtcars[, 1:2], use.bin = 3)
View(mtcars)
bin.windows(mtcars[, c("gear", "carb")], use.bin = 2)
debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
.dns
.dms
library(book.of.features)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
i <- sample(500, 50)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
use.bin
round(diff(range(sort_X)/use.bin))
ange(sort_X)
range(sort_X)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
aperm(X, c(s.call, s.ans))
c(prod(d.call), d2)
c(dn.call, list(NULL))
diff(range(sort_X))/use.bin
use.bin
diff(range(sort_X))/use.bin
diff(range(sort_X))
cut(sort_X,
breaks = round(diff(range(sort_X))/use.bin), dig.lab = 0,
ordered_result = TRUE, include.lowest = TRUE, right = TRUE)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
debug(bin.windows)
undebug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
library(book.of.features)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
undebug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
mtcars
dim(mtcars[, c(1,2)])
dim(mtcars[, c(1,2)]) |> dim()
dim(mtcars[, c(1,2)]) |> length()
debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
length(.dms)
i
apply(X = i, MARGIN = length(.dms), FUN = func,
simplify = TRUE)
.breaks
if (.breaks ==
1) {
as.character(sort_X)
}
.map
.out
(!as.factor)
levels(.out)[.out]
.out
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
mtcars[, c("gear", "carb")]
library(book.of.features)
# debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
# debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
library(book.of.features)
bin.windows(i, as.factor = TRUE)
bin.windows(i, as.factor = !TRUE)
bin.windows(i, use.bin = 10, as.factor = TRUE)
bin.windows(i, use.bin = 10, as.factor = !TRUE)
# debug(bin.windows)
bin.windows(i = mtcars[, c("gear", "carb")], use.bin = 2)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
