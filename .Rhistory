bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(.Data
, as.data.frame(.Data) |> bin.windows(use.bin = 7))
.Data <- array(t(.Data) |> as.vector(), dim = c(15, 2, 2), dimnames = list(NULL, c("B", "C"), c("A", "Z")))
list(-.Data
, -.Data |> bin.windows(use.bin = 7, as.factor = TRUE)
, -.Data |> purrr::array_tree(3) |> purrr::map(`%bin%`, 7) |> abind::abind(along = 3)
)
X <- bin.windows(
i = array(data = sample(100:200, 60)
, dim = c(10, 2, 3)
, dimnames = purrr::map2(c(10, 2, 3), LETTERS[1:3], ~rep.int(.y, .x))
)
, use.bin = 7
, as.factor = TRUE
)
dim(X)
X[1,1,]
X[1,2,]
X[,,2]
X[1,2,3]
X <- bin.windows(array(sample(50:500, 120), dim = c(5, 4, 3, 2), dimnames = purrr::map2(c(5, 4, 3, 2), LETTERS[1:4], ~rep.int(.y, .x))), use.bin = 20)
dim(X)
X[1,1,,]
X[3,2,3, ]
X[,,3,1]
X[5,2,3, 1]
source(dir("pkg/R", full.names = TRUE))
dir("pkg/R", full.names = TRUE)
dir("pkg/R", full.names = TRUE)
# debug(make.windows)
make.windows(
series = c(1:100)
, window.size = 2
, increment = 1
)
make.windows(series = c(1:100), window.size = 2, increment = 2)
make.windows(c(1:100), 7, 1, .complete = TRUE)
# make.quantiles() [] ----
make.quantiles(1:10)
# make.quantiles() [] ----
make.quantiles(sample(100, 20), c(1:10/10))
# make.quantiles() [] ----
make.quantiles(sample(100, 20) |> sort(), c(1:10/10))
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}
#'
#' @return A quantile representation of the input
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
idx <- sapply(x, function(i){ max(which(q.vec <= i))})
return(q.vec[idx])
}
#
# make.quantiles() [] ----
debug(make.quantiles)
make.quantiles(sample(100, 20) |> sort(), c(1:10/10))
q.vec
x
outer(x, q.vec, `<=`)
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
outer(x, q.vec, `<=`)
outer(x, q.vec, `<=`) |> apply(1, \(x) which(x) |> max())
outer(x, q.vec, `<=`) |> apply(1, \(x) which(x) |> min())
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) which(x) |> min(), colnames(.))
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}
#'
#' @return A quantile representation of the input
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
}
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
make.quantiles(sample(900, 20) |> sort(), c(0:10/10))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:11/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% sort() |> cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
formals(quantile)
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}.  Defaults are as follows:\cr
#' \itemize{
#' \item{\code{probs = seq(0, 1, 0.25)}}
#' \item{\code{na.rm = FALSE}}
#' \item{\code{names = TRUE}}
#' \item{\code{type = 7}}
#' \item{\code{digits = 7}}
#' \item{\code{...}}
#' }
#'
#' @note Any indeterminate probabilities relative to the input will return \code{NA}
#'
#' @return A quantile representation of the input
#'
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
}
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
docstring::docstring(make.quantiles)
#
# sigmoid() [PASS] ----
sigmoid(sample(100, 50))
#
# sigmoid() [PASS] ----
sigmoid(sample(100, 50)) |> plot()
#
# sigmoid() [PASS] ----
sample(100, 50) %>% cbind(sigmoid(.)) |> plot()
#
# sigmoid() [PASS] ----
sample(100, 50) %>% cbind(sigmoid(.)) |> plot(xlab = "Input", ylab = "Transformed")
View(logic_map)
library(book.of.features)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
dir()
pkg_env("package:book.of.features")
rlang::pkg_env("package:book.of.features")
library(book.of.features)
library(book.of.workflow)
load_unloaded(
magrittr
, purrr
, keyring
, data.table
, devtools
)
install.packages("devtools")
library(book.of.workflow)
load_unloaded(
magrittr
, purrr
, keyring
, data.table
, devtools
)
git_creds <- source("C:/Users/Chionesu/OneDrive/Projekz/Templates & Snippets/export_keys.R")$value |>
map(~jsonlite::fromJSON(.x)) |>
rbindlist(idcol = "keyring") |>
setkey(service)
repos <- c("book.of.utilities", "book.of.workflow", "book.of.features", "DBOE", "event.vectors", "smart.data", "architect", "remoterUtils")
library(purrr)
detach("package:purrr", unload = TRUE)
install.packages("purrr")
dir("~")
library(book.of.workflow)
load_unloaded(
magrittr
, purrr
, keyring
, data.table
, devtools
)
git_creds <- source(file.choose())$value |>
map(~jsonlite::fromJSON(.x)) |>
rbindlist(idcol = "keyring") |>
setkey(service)
load_unloaded(
magrittr
, purrr
, keyring
, data.table
, devtools
)
c("magrittr"
, "purrr"
, "keyring"
, "data.table"
, "devtools"
) |> sapply(library, character.only  = TRUE)
git_creds <- source(file.choose())$value |>
map(~jsonlite::fromJSON(.x)) |>
rbindlist(idcol = "keyring") |>
setkey(service)
repos <- c("book.of.utilities", "book.of.workflow", "book.of.features", "DBOE", "event.vectors", "smart.data", "architect", "remoterUtils")
git_creds["github"] %$% map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "April2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = "delriaan", password = askpass::askpass())
)
})
map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "April2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = "delriaan", password = askpass::askpass())
)
})
assign(".pass", writeClipboard())
assign(".pass", readClipboard())
library(magrittr)
library(purrr)
library(keyring)
library(data.table)
library(devtools)
repos <- c("book.of.utilities", "book.of.workflow", "book.of.features", "DBOE", "event.vectors", "smart.data", "architect", "remoterUtils")
# git_creds["github"] %$%
map(tcltk::tk_select.list(repos, title = "Choose one or more packages to insall", multiple = TRUE), ~{
install_git(
url = glue::glue("https://github.com/delriaan/{.x}")
, ref = "April2023"
, subdir = "pkg"
, credentials = git2r::cred_user_pass(username = "delriaan", password = .pass)
)
})
.user <- askpass::askpass(prompt = "Enter your GitHub account username")
library(book.of.features)
rlang::pkg_env("package:book.of.features")
rlang::pkg_env("book.of.features")
rlang::pkg_env("book.of.features") |> ls()
rlang::pkg_env("book.of.features") |> ls() |> paste(collapse = "\n- ") |> cat()
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
#
make.quantiles <- function(x, as.factor = FALSE, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.  Unmatched quantiles will return \code{NA} in order to match the length of the input vector.
#'
#' @param x The input vector
#' @param as.factor (logical) Should the output be returned as a factor?
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}.  Defaults are as follows:\cr
#' \itemize{
#' \item{\code{probs = seq(0, 1, 0.25)}}
#' \item{\code{na.rm = FALSE}}
#' \item{\code{names = TRUE}}
#' \item{\code{type = 7}}
#' \item{\code{digits = 7}}
#' \item{\code{...}}
#' }
#'
#' @note Any indeterminate probabilities relative to the input will return \code{NA}
#'
#' @return A quantile representation of the input
#'
#' @export
args <- rlang::exprs(...);
args$x <- rlang::expr(!!x);
if (as.factor){ args$names <- rlang::expr(TRUE) }
q.vec <- do.call(quantile, eval(args))
.out <- outer(x, q.vec, `<=`)
.out <- apply(.out, 1, \(x){
idx <- names(q.vec)[which(x) |> min()];
if (as.factor){ idx } else { q.vec[idx] }
});
if (as.factor){
factor(.out, levels = names(q.vec), ordered = TRUE)
} else { .out }
}
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10))))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:9/10), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:1/10), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:1/10), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, c(0:1/10), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, seq(0, 1, .1), as.factor = !TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) cbind(x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) make.quantiles(x, seq(0, 1, .1), as.factor = TRUE))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> sort() |> (\(x) list(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> (\(x) list(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
library(book.of.features)
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> (\(x) list(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
rm(make.quantiles())
rm(make.quantiles)
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> (\(x) list(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> (\(x) data.frame(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = TRUE)))()
#
# make.quantiles() [PASS] ----
# debug(make.quantiles)
sample(900, 20) |> (\(x) data.frame(x = x, q = make.quantiles(x, seq(0, 1, .1), as.factor = !TRUE)))()
library(book.of.features)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
remotes::install_github("delriaan/book.of.features", ref="June2023", subdir = "pkg")
remotes::install_github("delriaan/book.of.workflow", ref="June2023", subdir = "pkg")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(book.of.features)
dir('man')
dir("pkg/man")
dir("pkg/man", full.names = TRUE)
dir("pkg/man", full.names = TRUE) |> unlink()
library(book.of.features)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(book.of.features)
# bin.windows() [PASS] ====
# undebug(bin.windows)
bin.windows(40, use.bin = 3)
bin.windows(40, use.bin = 3, as.factor = TRUE)
bin.windows(40, use.bin = 3, silently = TRUE)
list(.Data, bin.windows(.Data, use.bin = 3))
.Data <- c(5, 50)
list(.Data, bin.windows(.Data, use.bin = 3))
.Data <- matrix(c(5, 50), nrow = 1)
list(.Data, bin.windows(.Data, use.bin = 3))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE, silently = TRUE))
.Data <- array(1:10, dim = c(5, 2))
list(.Data, bin.windows(.Data, use.bin = 3))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- array(1:10, dim = c(5, 2))
list(.Data, bin.windows(.Data, use.bin = 3))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = FALSE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- matrix(c(5, 50), nrow = 1)
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = FALSE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- array(1:10, dim = c(5, 2))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = FALSE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(.Data, bin.windows(.Data, use.bin = 7), .Data %bin% 7)
list(.Data, bin.windows(.Data, use.bin = 7), round((.Data/7) - .(Data/7 %% 7)))
list(.Data, bin.windows(.Data, use.bin = 7), round((.Data/7) - (.Data/7 %% 7)))
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
.Data
list(.Data, bin.windows(.Data, use.bin = 7))
.Data <- array(t(.Data) |> as.vector(), dim = c(15, 2, 2), dimnames = list(NULL, c("B", "C"), c("A", "Z")))
list(-.Data
, -.Data |> bin.windows(use.bin = 7, as.factor = TRUE)
, -.Data |> purrr::array_tree(3) |> purrr::map(`%bin%`, 7) |> abind::abind(along = 3)
)
# bin.windows() [PASS] ====
bin.windows(40, use.bin = 3)
bin.windows(40, use.bin = 3, as.factor = TRUE)
bin.windows(40, use.bin = 3, silently = TRUE)
.Data <- c(5, 50)
list(before = .Data, after = bin.windows(.Data, use.bin = 3))
.Data <- array(1:10, dim = c(5, 2))
list(before = .Data, after = bin.windows(.Data, use.bin = 3, as.factor = FALSE))
list(before = .Data, after = bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(before = .Data, after = bin.windows(.Data, use.bin = 7))
list(before = .Data, after = as.data.frame(.Data) |> bin.windows(use.bin = 7))
# create_dims() [] ----
k <- create_dims(n = 90, d = 3)
# Create a tensor with dimensions sampled from `k`:
array(sample(x = 200, size = prod(k[1, ]), replace = TRUE), dim = k[sample(nrow(k), 1), ])
View(k)
# Create a tensor with dimensions sampled from `k`:
sample(x = 200, size = prod(k[1, ]), replace = TRUE) |>
array(dim = k[sample(nrow(k), 1), ])
# create_dims() [] ----
k <- create_dims(n = 20, d = 4)
# create_dims() [] ----
k <- create_dims(n = 20, d = 4)
# create_dims() [] ----
k <- create_dims(n = 90, d = 3)
# create_dims() [] ----
k <- create_dims(n = 20, d = 3)
# create_dims() [] ----
k <- create_dims(n = 20, d = 4)
debug(create_dims)
# create_dims() [] ----
k <- create_dims(n = 20, d = 4)
combinat::combn(x, d, simplify = FALSE)
combinat::combn(x, d, simplify = FALSE) |>
purrr::keep(\(i) prod(i) == n)
# create_dims() [] ----
k <- create_dims(n = 50, d = 4)
undebug(create_dims)
# create_dims() [] ----
k <- create_dims(n = 50, d = 4)
# create_dims() [] ----
k <- create_dims(n = 50, d = 3)
# create_dims() [] ----
k <- create_dims(n = 20, d = 3)
k <- create_dims(n = 50, d = 4)
k <- create_dims(n = 52, d = 4)
k <- create_dims(n = 56, d = 4)
# debug(create_dims)
# Create a tensor with dimensions sampled from `k`:
sample(x = 200, size = prod(k[1, ]), replace = TRUE) |>
array(dim = k[sample(nrow(k), 1), ])
library(book.of.features)
# create_dims() [PASS] ----
k <- create_dims(n = 20, d = 3)
# debug(create_dims)
# Create a tensor with dimensions sampled from `k`:
sample(x = 200, size = prod(k[1, ]), replace = TRUE) |>
array(dim = k[sample(nrow(k), 1), ])
k <- create_dims(n = 56, d = 4)
# debug(create_dims)
# Create a tensor with dimensions sampled from `k`:
sample(x = 200, size = prod(k[1, ]), replace = TRUE) |>
array(dim = k[sample(nrow(k), 1), ])
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(book.of.features)
