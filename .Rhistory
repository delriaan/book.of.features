#' @param i (integer[]) An integer scalar, vector, or n-dimensional object executed conditionally as follows:
#' \itemize{
#' \item if a vector of length = 1, a zero-based sequence up to \code{abs(i) } is used
#' \item if a vector of length = 2, a sequence is created from the values in the order given if the input is non-dimensional
#' \item if a vector of length >= 3 or \code{i} is dimensional, the raw values coerced into a vector
#' }
#'
#' @param use.bin The bin size to use: when empty, the smallest prime number or integer factor in \code{i} within the range of \code{i} is used.
#' @param as.factor (logical) Should the output be converted into a factor?
#' @param label_format (string) A two-argument string compatible with \code{\link[base]{sprintf}} that controls label output
#' @param silently (logical) Should the output return invisibly?
#' @param ... (not used)
#'
#' @return A character (or factor) vector the length of the input, as "binned" representations.  If the input is dimensional, an array of the same dimensions is returned
#'
#' @note Factor output is only available for heterogeneous data structures
#'
#' @family Data Generation
#'
#' @export
if (rlang::has_length(i, 1)){
i <- matrix(0:i, ncol = 1)
} else if (rlang::has_length(i, 2) & rlang::is_empty(dim(i))){
i <- `:`(i[1], i[2])
}
if (rlang::is_empty(dim(i))){ dim(i) <- c(length(i), 1) }
output <- NULL;
.dnames <- dimnames(i);
.dims <- dim(i);
.class <- class(i);
i <- c(i) |> data.table::setattr("orig", i)
force(use.bin)
use.bin <- abs(use.bin)
if (rlang::is_empty(use.bin)){
bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X.bins
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
# bin.windows() ====
# undebug(bin.windows)
bin.windows(40, use.bin = 3)
#
bin.windows <- function(i = 1, use.bin = NULL, as.factor = FALSE, label_format = "<%s,%s>", silently = FALSE, ...){
#' Create Bins From Integer Factor
#'
#' \code{bin.windows} creates binned ranges based on the minimum factor of the integer input (\code{i}) or user-supplied value.
#'
#' @param i (integer[]) An integer scalar, vector, or n-dimensional object executed conditionally as follows:
#' \itemize{
#' \item if a vector of length = 1, a zero-based sequence up to \code{abs(i) } is used
#' \item if a vector of length = 2, a sequence is created from the values in the order given if the input is non-dimensional
#' \item if a vector of length >= 3 or \code{i} is dimensional, the raw values coerced into a vector
#' }
#'
#' @param use.bin The bin size to use: when empty, the smallest prime number or integer factor in \code{i} within the range of \code{i} is used.
#' @param as.factor (logical) Should the output be converted into a factor?
#' @param label_format (string) A two-argument string compatible with \code{\link[base]{sprintf}} that controls label output
#' @param silently (logical) Should the output return invisibly?
#' @param ... (not used)
#'
#' @return A character (or factor) vector the length of the input, as "binned" representations.  If the input is dimensional, an array of the same dimensions is returned
#'
#' @note Factor output is only available for heterogeneous data structures
#'
#' @family Data Generation
#'
#' @export
if (rlang::has_length(i, 1)){
i <- matrix(0:i, ncol = 1)
} else if (rlang::has_length(i, 2) & rlang::is_empty(dim(i))){
i <- `:`(i[1], i[2])
}
if (rlang::is_empty(dim(i))){ dim(i) <- c(length(i), 1) }
output <- NULL;
.dnames <- dimnames(i);
.dims <- dim(i);
.class <- class(i);
i <- c(i) |> data.table::setattr("orig", i)
force(use.bin)
use.bin <- abs(use.bin)
if (rlang::is_empty(use.bin)){
bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
# bin.windows() ====
# undebug(bin.windows)
bin.windows(40, use.bin = 3)
bin.windows(40, use.bin = 3, as.factor = TRUE)
bin.windows(40, use.bin = 3, silently = TRUE)
.Data <- c(5, 50)
list(.Data, bin.windows(.Data, use.bin = 3))
.Data <- matrix(c(5, 50), nrow = 1)
list(.Data, bin.windows(.Data, use.bin = 3))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE, silently = TRUE))
.Data <- array(1:10, dim = c(5, 2))
list(.Data, bin.windows(.Data, use.bin = 3))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- array(1:10, dim = c(10, 1))
list(.Data, bin.windows(.Data, use.bin = 3, as.factor = TRUE))
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(.Data, bin.windows(.Data, use.bin = 7), .Data %bin% 7)
.Data <- array(t(.Data) |> as.vector(), dim = c(15, 2, 2), dimnames = list(NULL, c("B", "C"), c("A", "Z")))
list(-.Data
, -.Data |> bin.windows(use.bin = 7, as.factor = TRUE)
, -.Data |> purrr::array_tree(3) |> purrr::map(`%bin%`, 7) |> abind::abind(along = 3)
)
list(.Data
, as.data.frame(.Data) |> bin.windows(use.bin = 7))
as.data.frame(.Data) |> bin.windows(use.bin = 7)
#
bin.windows <- function(i = 1, use.bin = NULL, as.factor = FALSE, label_format = "<%s,%s>", silently = FALSE, ...){
#' Create Bins From Integer Factor
#'
#' \code{bin.windows} creates binned ranges based on the minimum factor of the integer input (\code{i}) or user-supplied value.
#'
#' @param i (integer[]) An integer scalar, vector, or n-dimensional object executed conditionally as follows:
#' \itemize{
#' \item if a vector of length = 1, a zero-based sequence up to \code{abs(i) } is used
#' \item if a vector of length = 2, a sequence is created from the values in the order given if the input is non-dimensional
#' \item if a vector of length >= 3 or \code{i} is dimensional, the raw values coerced into a vector
#' }
#'
#' @param use.bin The bin size to use: when empty, the smallest prime number or integer factor in \code{i} within the range of \code{i} is used.
#' @param as.factor (logical) Should the output be converted into a factor?
#' @param label_format (string) A two-argument string compatible with \code{\link[base]{sprintf}} that controls label output
#' @param silently (logical) Should the output return invisibly?
#' @param ... (not used)
#'
#' @return A character (or factor) vector the length of the input, as "binned" representations.  If the input is dimensional, an array of the same dimensions is returned
#'
#' @note Factor output is only available for heterogeneous data structures
#'
#' @family Data Generation
#'
#' @export
if (rlang::has_length(i, 1)){
i <- matrix(0:i, ncol = 1)
} else if (rlang::has_length(i, 2) & rlang::is_empty(dim(i))){
i <- `:`(i[1], i[2])
}
if (rlang::is_empty(dim(i))){ dim(i) <- c(length(i), 1) }
output <- NULL;
.dnames <- dimnames(i);
.dims <- dim(i);
.class <- class(i);
i <- c(i) |> as.numeric() |> data.table::setattr("orig", i)
force(use.bin)
use.bin <- abs(use.bin)
if (rlang::is_empty(use.bin)){
bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(.Data, bin.windows(.Data, use.bin = 7), .Data %bin% 7)
.Data <- array(t(.Data) |> as.vector(), dim = c(15, 2, 2), dimnames = list(NULL, c("B", "C"), c("A", "Z")))
list(-.Data
, -.Data |> bin.windows(use.bin = 7, as.factor = TRUE)
, -.Data |> purrr::array_tree(3) |> purrr::map(`%bin%`, 7) |> abind::abind(along = 3)
)
list(.Data
, as.data.frame(.Data) |> bin.windows(use.bin = 7))
#
bin.windows <- function(i = 1, use.bin = NULL, as.factor = FALSE, label_format = "<%s,%s>", silently = FALSE, ...){
#' Create Bins From Integer Factor
#'
#' \code{bin.windows} creates binned ranges based on the minimum factor of the integer input (\code{i}) or user-supplied value.
#'
#' @param i (integer[]) An integer scalar, vector, or n-dimensional object executed conditionally as follows:
#' \itemize{
#' \item if a vector of length = 1, a zero-based sequence up to \code{abs(i) } is used
#' \item if a vector of length = 2, a sequence is created from the values in the order given if the input is non-dimensional
#' \item if a vector of length >= 3 or \code{i} is dimensional, the raw values coerced into a vector
#' }
#'
#' @param use.bin The bin size to use: when empty, the smallest prime number or integer factor in \code{i} within the range of \code{i} is used.
#' @param as.factor (logical) Should the output be converted into a factor?
#' @param label_format (string) A two-argument string compatible with \code{\link[base]{sprintf}} that controls label output
#' @param silently (logical) Should the output return invisibly?
#' @param ... (not used)
#'
#' @return A character (or factor) vector the length of the input, as "binned" representations.  If the input is dimensional, an array of the same dimensions is returned
#'
#' @note Factor output is only available for heterogeneous data structures
#'
#' @family Data Generation
#'
#' @export
if (rlang::has_length(i, 1)){
i <- matrix(0:i, ncol = 1)
} else if (rlang::has_length(i, 2) & rlang::is_empty(dim(i))){
i <- `:`(i[1], i[2])
}
if (rlang::is_empty(dim(i))){ dim(i) <- c(length(i), 1) }
output <- NULL;
.dnames <- dimnames(i);
.dims <- dim(i);
.class <- class(i);
i <- data.table::setattr(if ("data.frame" %in% .class){ as.vector(i) } else { c(i) }, "orig", i)
force(use.bin)
use.bin <- abs(use.bin)
if (rlang::is_empty(use.bin)){
bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
# bin.windows() ====
# undebug(bin.windows)
bin.windows(40, use.bin = 3)
list(.Data
, as.data.frame(.Data) |> bin.windows(use.bin = 7))
list(.Data, bin.windows(.Data, use.bin = 7), .Data %bin% 7)
#
bin.windows <- function(i = 1, use.bin = NULL, as.factor = FALSE, label_format = "<%s,%s>", silently = FALSE, ...){
#' Create Bins From Integer Factor
#'
#' \code{bin.windows} creates binned ranges based on the minimum factor of the integer input (\code{i}) or user-supplied value.
#'
#' @param i (integer[]) An integer scalar, vector, or n-dimensional object executed conditionally as follows:
#' \itemize{
#' \item if a vector of length = 1, a zero-based sequence up to \code{abs(i) } is used
#' \item if a vector of length = 2, a sequence is created from the values in the order given if the input is non-dimensional
#' \item if a vector of length >= 3 or \code{i} is dimensional, the raw values coerced into a vector
#' }
#'
#' @param use.bin The bin size to use: when empty, the smallest prime number or integer factor in \code{i} within the range of \code{i} is used.
#' @param as.factor (logical) Should the output be converted into a factor?
#' @param label_format (string) A two-argument string compatible with \code{\link[base]{sprintf}} that controls label output
#' @param silently (logical) Should the output return invisibly?
#' @param ... (not used)
#'
#' @return A character (or factor) vector the length of the input, as "binned" representations.  If the input is dimensional, an array of the same dimensions is returned
#'
#' @note Factor output is only available for heterogeneous data structures
#'
#' @family Data Generation
#'
#' @export
if (rlang::has_length(i, 1)){
i <- matrix(0:i, ncol = 1)
} else if (rlang::has_length(i, 2) & rlang::is_empty(dim(i))){
i <- `:`(i[1], i[2])
}
if (rlang::is_empty(dim(i))){ dim(i) <- c(length(i), 1) }
output <- NULL;
.dnames <- dimnames(i);
.dims <- dim(i);
.class <- class(i);
i <- data.table::setattr(if ("data.frame" %in% .class){ unlist(i, use.names = FALSE) } else { c(i) }, "orig", i)
force(use.bin)
use.bin <- abs(use.bin)
if (rlang::is_empty(use.bin)){
bin_fact <- purrr::keep(unlist(book.of.utilities::factor.int(i)), `%in%`, `:`(min(i), max(i))) |> min(na.rm = TRUE)
use.bin <- if (rlang::is_empty(bin_fact)){
book.of.utilities::gen.primes(n = 1, domain = range(i), distinct = TRUE, random = FALSE)
} else { bin_fact }
}
func <- purrr::as_mapper(~{
orig_X <- .x
orig_X.bins <- book.of.utilities::`%bin%`(orig_X, use.bin)
sort_X <- sort(orig_X) |> unique();
.fmt <- .y
.map <- { data.table::data.table(
win.vals = orig_X
, label = cbind(orig_X.bins, orig_X.bins + use.bin - 1) |>
apply(1, \(x) sprintf(fmt = .fmt, sort(x)[1], sort(x)[2]))
)
}
attr(.map$label, "bin.map") <- .map[order(win.vals), .(win.vals = list(range(win.vals))), by = label][, purrr::map(.SD, `attributes<-`, value = NULL)];
attr(.map$label, "bin.size") <- use.bin;
if (as.factor){ factor(.map$label, levels = attr(.map$label, "bin.map")$label, ordered = TRUE) } else { .map$label }
});
output <- func(i, label_format) |> structure(dim = .dims, dimnames = .dnames)
if (silently){ invisible(output) } else { output }
}
.Data <- cbind(
a = sample(70, 30)
, b = sample(100, 30)
, c = sample(10, 30, TRUE)
)
list(.Data
, as.data.frame(.Data) |> bin.windows(use.bin = 7))
.Data <- array(t(.Data) |> as.vector(), dim = c(15, 2, 2), dimnames = list(NULL, c("B", "C"), c("A", "Z")))
list(-.Data
, -.Data |> bin.windows(use.bin = 7, as.factor = TRUE)
, -.Data |> purrr::array_tree(3) |> purrr::map(`%bin%`, 7) |> abind::abind(along = 3)
)
X <- bin.windows(
i = array(data = sample(100:200, 60)
, dim = c(10, 2, 3)
, dimnames = purrr::map2(c(10, 2, 3), LETTERS[1:3], ~rep.int(.y, .x))
)
, use.bin = 7
, as.factor = TRUE
)
dim(X)
X[1,1,]
X[1,2,]
X[,,2]
X[1,2,3]
X <- bin.windows(array(sample(50:500, 120), dim = c(5, 4, 3, 2), dimnames = purrr::map2(c(5, 4, 3, 2), LETTERS[1:4], ~rep.int(.y, .x))), use.bin = 20)
dim(X)
X[1,1,,]
X[3,2,3, ]
X[,,3,1]
X[5,2,3, 1]
source(dir("pkg/R", full.names = TRUE))
dir("pkg/R", full.names = TRUE)
dir("pkg/R", full.names = TRUE)
# debug(make.windows)
make.windows(
series = c(1:100)
, window.size = 2
, increment = 1
)
make.windows(series = c(1:100), window.size = 2, increment = 2)
make.windows(c(1:100), 7, 1, .complete = TRUE)
# make.quantiles() [] ----
make.quantiles(1:10)
# make.quantiles() [] ----
make.quantiles(sample(100, 20), c(1:10/10))
# make.quantiles() [] ----
make.quantiles(sample(100, 20) |> sort(), c(1:10/10))
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}
#'
#' @return A quantile representation of the input
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
idx <- sapply(x, function(i){ max(which(q.vec <= i))})
return(q.vec[idx])
}
#
# make.quantiles() [] ----
debug(make.quantiles)
make.quantiles(sample(100, 20) |> sort(), c(1:10/10))
q.vec
x
outer(x, q.vec, `<=`)
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
outer(x, q.vec, `<=`)
outer(x, q.vec, `<=`) |> apply(1, \(x) which(x) |> max())
outer(x, q.vec, `<=`) |> apply(1, \(x) which(x) |> min())
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) which(x) |> min(), colnames(.))
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}
#'
#' @return A quantile representation of the input
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
}
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
make.quantiles(sample(100, 20) |> sort(), c(0:10/10))
make.quantiles(sample(900, 20) |> sort(), c(0:10/10))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:10/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:11/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) %>% sort() |> cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
formals(quantile)
#
make.quantiles <- function(x, ...){
#' Quantiles Transformation
#'
#' \code{make.quantiles} is a wrapper for \code{\link[stats]{quantile}} replacing the input with calculated values.
#'
#' @param x The input vector
#' @param ... (\code{\link[rlang]{dots_list}}): Additional arguments sent to \code{\link[stats]{quantile}}.  Defaults are as follows:\cr
#' \itemize{
#' \item{\code{probs = seq(0, 1, 0.25)}}
#' \item{\code{na.rm = FALSE}}
#' \item{\code{names = TRUE}}
#' \item{\code{type = 7}}
#' \item{\code{digits = 7}}
#' \item{\code{...}}
#' }
#'
#' @note Any indeterminate probabilities relative to the input will return \code{NA}
#'
#' @return A quantile representation of the input
#'
#' @export
q.vec <- rlang::inject(quantile(x = x, ...));
outer(x, q.vec, `<=`) %>% apply(1, \(x, k) k[which(x) |> min()], colnames(.))
}
sample(900, 20) |> sort() %>% cbind(make.quantiles(., c(0:9/10)))
docstring::docstring(make.quantiles)
#
# sigmoid() [PASS] ----
sigmoid(sample(100, 50))
#
# sigmoid() [PASS] ----
sigmoid(sample(100, 50)) |> plot()
#
# sigmoid() [PASS] ----
sample(100, 50) %>% cbind(sigmoid(.)) |> plot()
#
# sigmoid() [PASS] ----
sample(100, 50) %>% cbind(sigmoid(.)) |> plot(xlab = "Input", ylab = "Transformed")
View(logic_map)
library(book.of.features)
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
